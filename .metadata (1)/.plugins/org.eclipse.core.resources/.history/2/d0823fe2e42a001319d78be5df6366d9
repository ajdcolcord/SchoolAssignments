// assignment 3
// partner1-Colcord-Austin
// partner1-acolcord
// partner2-Su-Jun
// partner2-jacklyso

import tester.*;


//////////////////////////////////////////////////////////////////////////////
//ILoS
// to represent a list of Strings
interface ILoS{
    // combine all Strings in this list into one
    String combine();
    
    //compares two items and returns true if this String
    //comes alphabetically before that
    boolean compareAlph(String that);
    
    //returns the first of the list
    String firstList();
    
    //return the rest of the list
    ILoS restList();
    
    // tell if the list is sorted in alphabetical order
    boolean isSorted();
    
    //merge two lists together in alphabetical order
    ILoS merge(ILoS that);
}


//////////////////////////////////////////////////////////////////////////////
//MtLoS
// to represent an empty list of Strings
class MtLoS implements ILoS{
    MtLoS(){}

    // combine all Strings in this list into one
    public String combine(){
        return "";
    }  
    
    // compares two items to see if they are in alphabetical order
    public boolean compareAlph(String that) {
        return true;
    }
    
    // return the first of the list
    public String firstList() {
        return "";
    }
    
    //return the rest of the list
    public ILoS restList() {
        return this;
    }
    // tells if the list is sorted
    public boolean isSorted() {
        return true;
    }
    
    //merge two list together in alphabetical order
    public ILoS merge(ILoS that) {
        return that;
    }
}


//////////////////////////////////////////////////////////////////////////////
//ConsLoS
/*
TEMPLATE
FIELDS:
... this.first ...         -- String
... this.rest ...          -- ILoS

METHODS
... this.combine() ...      -- String

METHODS FOR FIELDS
... this.first.concat(String) ...       -- String
... this.first.compareTo(String) ...    -- int
... this.rest.combine() ...             -- String

   */
// to represent a nonempty list of Strings
class ConsLoS implements ILoS{
    String first;
    ILoS rest;

    ConsLoS(String first, ILoS rest){
        this.first = first;
        this.rest = rest;  
    }

    // combine all Strings in this list into one
    public String combine(){
        return this.first.concat(this.rest.combine());
    }  
    
    // compares two items to see if they are in alphabetical order
    public boolean compareAlph(String that) {
        if (that.equals("")) {
            return true;
        }
        else {
            return (this.first.toLowerCase().compareTo(that.toLowerCase()) <= 0);
        }
    }
    
    // tells what the first of the list is
    public String firstList() {
        return this.first;
    }
    
    // tells what the rest of the list is
    public ILoS restList() {
        return this.rest;
    }
    
    // tells if the list is sorted
    public boolean isSorted() {
        if (this.compareAlph(this.rest.firstList())) {
            return (this.rest.isSorted());
        }
        else {
            return false;
        }
    }
    
    //merge two lists together in alphabetical order
    public ILoS merge(ILoS that) {
        if (this.compareAlph(that.firstList())) {
            return new ConsLoS(this.first, this.rest.merge(that));
        }
        else {
            return new ConsLoS(that.firstList(), this.merge(that.restList()));
        }
    }
}


//////////////////////////////////////////////////////////////////////////////
//EXAMPLES
// to represent examples for lists of strings
class ExamplesStrings {
    //ExamplesStrings() { }
    
    String bee = "bee";
    String cee = "cee";
    String empty = "";
    
    
    ILoS emptylist = new MtLoS();
    
    ILoS meow = new ConsLoS("meow!", this.emptylist);
    ILoS goes = new ConsLoS("goes ", this.meow);
    ILoS cat = new ConsLoS("Cat ", this.goes);
    
    ILoS lamb = new ConsLoS("lamb.", this.emptylist);
    ILoS little = new ConsLoS("little ", this.lamb);
    ILoS a = new ConsLoS("a ", this.little);
    ILoS had = new ConsLoS("had ", this.a);
    ILoS mary = new ConsLoS("Mary ", this.had);
    
    ILoS lista = new ConsLoS("Cat ",
            new ConsLoS("goes ", 
                    new ConsLoS("lamb.", 
                            new ConsLoS("meow!", this.emptylist))));

    /* ILoS mary = new ConsLoS("Mary ",
            new ConsLoS("had ",
                    new ConsLoS("a ",
                            new ConsLoS("little ",
                                    new ConsLoS("lamb.", new MtLoS()))))); */
    

    boolean testCombine(Tester t){
        return  t.checkExpect(this.mary.combine(), "Mary had a little lamb.") &&
                t.checkExpect(this.cat.combine(), "Cat goes meow!");
    }
    boolean testCompareAlph(Tester t) {
        return  t.checkExpect(this.mary.compareAlph(this.bee), false) && 
                t.checkExpect(this.cat.compareAlph(this.cee), true) &&
                t.checkExpect(this.meow.compareAlph(""), true);
    }
    boolean testFirstList(Tester t) {
        return  t.checkExpect(this.cat.firstList(), "Cat ") &&
                t.checkExpect(this.emptylist.firstList(), "") &&
                t.checkExpect(this.meow.firstList(), "meow!");
    }
    boolean testIsSorted(Tester t) {
        return  t.checkExpect(this.cat.isSorted(), true) &&
                t.checkExpect(this.little.isSorted(), false) &&
                t.checkExpect(this.mary.isSorted(), false) &&
                t.checkExpect(this.emptylist.isSorted(), true) &&
                t.checkExpect(this.meow.isSorted(), true);
    }
    boolean testMerge(Tester t) {
        return t.checkExpect(this.cat.merge(this.emptylist), this.cat) &&
                t.checkExpect(this.cat.merge(this.lamb), this.lista);
    }
}