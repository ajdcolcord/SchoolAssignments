import java.util.*;

/** Class to count frequencies of the words generated by an
 *   iterator.
 * @author CS2510
 * @version 11-09-2013 
 */
public class WordCounter {
    ArrayList<Word> wlist;
    /* ... FILL IN ... */

    /**
     * The default constructor
     */
    public WordCounter() {
        this.wlist = new ArrayList<Word>();
    }

    /** this constructor is for testing the methods below */
    public WordCounter(ArrayList<Word> alw) {
        this.wlist = alw;
    }
    
    /** Template:
     * Fields:
     * ...this.wlist... - ArrayList<Word>
     * Methods:
     * ...this.checkWord... - boolean
     * ...this.addOne... - void
     * ...this.countWords... - void
     * ...this.words... - int
     * ...this.findMost... - int
     * ...this.inOrder... - void
     * ...this.toString... - String
     * ...this.printWords... - void
     */


    /** check if the given word is equal to a word in WordCounter;
     * 
     * @param w the word given to check if it is in this
     * @return boolean if w is in this list
     */
    boolean checkWord(Word w) {
        boolean b = false;
        for (int i = 0; i < this.wlist.size(); i = i + 1 ) {
            if (this.wlist.get(i).equals(w)) {
                b = true;
            }
        }
        return b;
    }

    /**increase the counter of the given word by 
     * one suppose the word is in wlist 
     * 
     * @param w the word that will be added
     * */
    void addOne(Word w) {
        for (int i = 0; i < this.wlist.size(); i = i + 1) {
            if (this.wlist.get(i).equals(w)) {
                this.wlist.get(i).increment();
            }
        }
    }


    /** record the words generated by the given iterator
     * @param it the given iterator over the input text
     */
    public void countWords(Iterator<Word> it) {
        while (it.hasNext()) {
            Word w = it.next();
            if (this.checkWord(w)) {
                this.addOne(w);
            }
            else {
                this.wlist.add(w);
            }
        }
    }

    /** Count the number of different words in this Counter 
     * @return the count of different words in this Counter
     */
    public int words() {
        int n = 0;
        for (int i = 0; i < this.wlist.size(); i = i + 1) {
            n = n + 1;
        }
        return n;
    }

    /** find out which index of word has the most frequency 
     * 
     * @return int the count for the number of the most frequent word repeated
     * */
    public int findMost() {
        if (this.wlist.size() < 1) {
            throw new RuntimeException("no word in it");
        }
        else if (this.wlist.size() == 1) {
            return 0;
        }
        else {
            int n = 0;
            Comparator<Word> comp = new Word.ByFrequency();
            for (int i = 1; i < this.wlist.size(); i = i + 1) {
                if (comp.compare(this.wlist.get(n), this.wlist.get(i)) < 0) {
                    n = i;
                }
                else {
                    n = n;
                }
            }
            return n;
        }
    }


    /** resort the list of Words by their frequencies */
    public void inOrder() {
        WordCounter temp = this;
        WordCounter temp2 = new WordCounter();
        for (int i = 0; i <= this.wlist.size(); i = i + 1) {
            temp2.wlist.add(temp.wlist.get(temp.findMost()));
            temp.wlist.remove(temp.wlist.get(temp.findMost()));
        }
        this.wlist = temp2.wlist;
    }

    /** convert the n2 words to string, starting from n1 
     * 
     * @param n1 the starting word
     * @param n2 the ending word
     * @return String the string between n1 and n2
     * */
    public String toString(int n1, int n2) {
        if (n2 == 0) {
            return "";
        }
        else {
            return (this.wlist.get(n1).toString() + ","
                    + this.toString(n1 + 1, n2 - 1));
        }
    }


    /** Print the words and their frequencies for the top n words 
     * @param n the number of words to print
     */
    public void printWords(int n) {
        if (this.wlist.size() < n) {
            System.out.println("insufficient words");
        }
        else {
            String s;
            this.inOrder();
            s = this.toString(0, n - 1);
            System.out.println(s);
        }
    }  
}
